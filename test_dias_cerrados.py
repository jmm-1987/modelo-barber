#!/usr/bin/env python3
"""
Script para probar la verificaci√≥n de citas antes de cerrar d√≠as
"""

import sqlite3
import datetime
import requests
import json

DB_PATH = 'citas.db'
BASE_URL = 'http://localhost:5000'

def crear_datos_prueba():
    """Crear datos de prueba para verificar la funcionalidad"""
    
    # Fecha de ma√±ana
    ma√±ana = (datetime.datetime.now() + datetime.timedelta(days=1)).strftime('%Y-%m-%d')
    print(f"üìÖ Creando datos de prueba para: {ma√±ana}")
    
    # Conectar a la base de datos
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    
    # Obtener peluqueros existentes
    c.execute('SELECT id, nombre FROM peluqueros')
    peluqueros = c.fetchall()
    
    if not peluqueros:
        print("‚ùå No hay peluqueros en la base de datos")
        return
    
    print(f"üìã Peluqueros existentes: {peluqueros}")
    
    # Limpiar citas existentes para la fecha de prueba
    c.execute('DELETE FROM citas WHERE dia = ?', (ma√±ana,))
    
    # Crear una cita de prueba
    cita_prueba = ('Juan P√©rez', 'Corte', ma√±ana, '17:00', '123456789', peluqueros[0][0])
    c.execute('''
        INSERT INTO citas (nombre, servicio, dia, hora, telefono, peluquero_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', cita_prueba)
    print(f"‚úÖ Cita creada: {cita_prueba[0]} - {cita_prueba[1]} - {cita_prueba[2]} {cita_prueba[3]} - Peluquero {cita_prueba[5]}")
    
    conn.commit()
    conn.close()
    
    return ma√±ana

def probar_cerrar_dia_con_citas():
    """Probar cerrar un d√≠a que tiene citas reservadas"""
    
    fecha = crear_datos_prueba()
    print(f"\nüîç Probando cerrar d√≠a con citas: {fecha}")
    print("=" * 50)
    
    # Probar cerrar d√≠a para un peluquero espec√≠fico
    print("\n1Ô∏è‚É£ Probando cerrar d√≠a para un peluquero espec√≠fico:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_cerrado', 
                               json={'fecha': fecha, 'motivo': 'Prueba', 'peluquero_id': 1})
        data = response.json()
        print(f"   Respuesta: {data}")
        if not data['ok']:
            print("   ‚úÖ CORRECTO: No se pudo cerrar el d√≠a porque hay citas")
        else:
            print("   ‚ùå ERROR: Se pudo cerrar el d√≠a a pesar de tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")
    
    # Probar cerrar d√≠a para todos los peluqueros
    print("\n2Ô∏è‚É£ Probando cerrar d√≠a para todos los peluqueros:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_cerrado_todos_peluqueros', 
                               json={'fecha': fecha, 'motivo': 'Prueba'})
        data = response.json()
        print(f"   Respuesta: {data}")
        if not data['ok']:
            print("   ‚úÖ CORRECTO: No se pudo cerrar el d√≠a porque hay citas")
        else:
            print("   ‚ùå ERROR: Se pudo cerrar el d√≠a a pesar de tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")
    
    # Probar marcar como festivo
    print("\n3Ô∏è‚É£ Probando marcar como festivo:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_festivo', 
                               json={'fecha': fecha, 'nombre': 'Prueba', 'tipo': 'festivo'})
        data = response.json()
        print(f"   Respuesta: {data}")
        if not data['ok']:
            print("   ‚úÖ CORRECTO: No se pudo marcar como festivo porque hay citas")
        else:
            print("   ‚ùå ERROR: Se pudo marcar como festivo a pesar de tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")

def probar_cerrar_dia_sin_citas():
    """Probar cerrar un d√≠a que NO tiene citas reservadas"""
    
    # Fecha de pasado ma√±ana (sin citas)
    pasado_ma√±ana = (datetime.datetime.now() + datetime.timedelta(days=2)).strftime('%Y-%m-%d')
    print(f"\nüîç Probando cerrar d√≠a SIN citas: {pasado_ma√±ana}")
    print("=" * 50)
    
    # Limpiar cualquier cita existente
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute('DELETE FROM citas WHERE dia = ?', (pasado_ma√±ana,))
    conn.commit()
    conn.close()
    
    # Probar cerrar d√≠a para un peluquero espec√≠fico
    print("\n1Ô∏è‚É£ Probando cerrar d√≠a para un peluquero espec√≠fico:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_cerrado', 
                               json={'fecha': pasado_ma√±ana, 'motivo': 'Prueba', 'peluquero_id': 1})
        data = response.json()
        print(f"   Respuesta: {data}")
        if data['ok']:
            print("   ‚úÖ CORRECTO: Se pudo cerrar el d√≠a porque no hay citas")
        else:
            print("   ‚ùå ERROR: No se pudo cerrar el d√≠a a pesar de no tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")
    
    # Probar cerrar d√≠a para todos los peluqueros
    print("\n2Ô∏è‚É£ Probando cerrar d√≠a para todos los peluqueros:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_cerrado_todos_peluqueros', 
                               json={'fecha': pasado_ma√±ana, 'motivo': 'Prueba'})
        data = response.json()
        print(f"   Respuesta: {data}")
        if data['ok']:
            print("   ‚úÖ CORRECTO: Se pudo cerrar el d√≠a porque no hay citas")
        else:
            print("   ‚ùå ERROR: No se pudo cerrar el d√≠a a pesar de no tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")
    
    # Probar marcar como festivo
    print("\n3Ô∏è‚É£ Probando marcar como festivo:")
    try:
        response = requests.post(f'{BASE_URL}/agregar_dia_festivo', 
                               json={'fecha': pasado_ma√±ana, 'nombre': 'Prueba', 'tipo': 'festivo'})
        data = response.json()
        print(f"   Respuesta: {data}")
        if data['ok']:
            print("   ‚úÖ CORRECTO: Se pudo marcar como festivo porque no hay citas")
        else:
            print("   ‚ùå ERROR: No se pudo marcar como festivo a pesar de no tener citas")
    except Exception as e:
        print(f"   ‚ùå Error en la petici√≥n: {e}")

if __name__ == "__main__":
    print("üß™ PROBANDO VERIFICACI√ìN DE CITAS ANTES DE CERRAR D√çAS")
    print("=" * 60)
    
    # Verificar que el servidor est√© corriendo
    try:
        response = requests.get(f'{BASE_URL}/')
        print("‚úÖ Servidor est√° corriendo")
    except:
        print("‚ùå ERROR: El servidor no est√° corriendo. Ejecuta 'python app.py' primero.")
        exit(1)
    
    probar_cerrar_dia_con_citas()
    probar_cerrar_dia_sin_citas()
    
    print("\nüéâ Pruebas completadas!") 